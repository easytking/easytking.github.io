<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ingress on jefffff&#39;s Blog</title>
    <link>https://luckytking.github.io/tags/ingress/</link>
    <description>Recent content in ingress on jefffff&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 15 Jul 2023 22:19:52 +0800</lastBuildDate><atom:link href="https://luckytking.github.io/tags/ingress/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>IngressAnnotations模式启用Apisix的Cors</title>
      <link>https://luckytking.github.io/2023/07/ingressannotations%E6%A8%A1%E5%BC%8F%E5%90%AF%E7%94%A8apisix%E7%9A%84cors/</link>
      <pubDate>Sat, 15 Jul 2023 22:19:52 +0800</pubDate>
      
      <guid>https://luckytking.github.io/2023/07/ingressannotations%E6%A8%A1%E5%BC%8F%E5%90%AF%E7%94%A8apisix%E7%9A%84cors/</guid>
      <description>&lt;p&gt;Apache APISIX 是 Apache 软件基金会下的云原生 API 网关，它兼具动态、实时、高性能等特点，提供了负载均衡、动态上游、灰度发布（金丝雀发布）、服务熔断、身份认证、可观测性等丰富的流量管理功能。很多场景下，我们可以选择在APISIX中使用CORS（跨源资源共享）来解决跨域问题。&lt;/p&gt;
&lt;p&gt;APISIX提供了CRD和Annotations模式来启用CORS。本文主要介绍如何在APISIX Ingress Annotations模式下启用CORS。&lt;/p&gt;
&lt;p&gt;环境：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;应用&lt;/th&gt;
&lt;th&gt;信息&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Kubernetes&lt;/td&gt;
&lt;td&gt;v1.25.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;apisix&lt;/td&gt;
&lt;td&gt;apache/apisix:3.4.0-debian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;apisix-ingress-controller&lt;/td&gt;
&lt;td&gt;apache/apisix-ingress-controller:1.6.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;ingressannotations模式&#34;&gt;IngressAnnotations模式&lt;/h3&gt;
&lt;p&gt;IngressAnnotations模式，可以通过在Ingress资源上添加注释来配置APISIX的行为。比如添加一个CORS注释来指示APISIX启用CORS：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;annotations&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;k8s.apisix.apache.org/enable-cors&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;kubernetes.io/ingress.class&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;apisix&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着，我们以给一个Http服务my-service, 创建了一个Ingress资源的例子来演示, Ingress详细如下：&lt;/p&gt;
&lt;h4 id=&#34;创建ingress&#34;&gt;创建Ingress&lt;/h4&gt;
&lt;p&gt;创建my-service的ingress资源：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Ingress&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;match-ingress&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-ns&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;k8s.apisix.apache.org/enable-cors&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;kubernetes.io/ingress.class&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;apisix&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;rules&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;http&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;backend&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;service&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-service&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;number&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/v2&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;pathType&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Prefix&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个示例中，我们添加了【k8s.apisix.apache.org/enable-cors: &amp;ldquo;true&amp;rdquo;】的注释， 即启用cors功能，默认允许来自任何源的请求访问my-service的API。&lt;/p&gt;
&lt;h4 id=&#34;dashboard启用cors&#34;&gt;Dashboard启用CORS&lt;/h4&gt;
&lt;p&gt;打开APISIX Dashboard界面：在【插件】中查找“CORS” 。单击该插件，然后单击“启用”。&lt;/p&gt;
&lt;p&gt;然后，可以在路由点击查看my-service的对应路由，如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;uris&amp;#34;&lt;/span&gt;: [
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/v2/&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/v2/*&amp;#34;&lt;/span&gt;
  ],
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ing_my-service-ingress_cfc81dbe&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;desc&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Created by apisix-ingress-controller, DO NOT modify it manually&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;plugins&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;cors&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;allow_credential&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;allow_headers&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;allow_methods&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;allow_origins&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;expose_headers&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;max_age&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    }
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;upstream_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7c630009&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;labels&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;managed-by&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apisix-ingress-controller&amp;#34;&lt;/span&gt;
  },
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;plugins.cors为跨域的对应规则配置，说明插件启用成功。&lt;/p&gt;
&lt;h4 id=&#34;测试&#34;&gt;测试&lt;/h4&gt;
&lt;p&gt;然后我们向my-service的发起一个测试请求：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;curl&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-k&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://[my-cluster-ip:nodeport]/v2/my-service/api/geeker&amp;#39;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;-X&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;OPTIONS&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;-H&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Access-Control-Allow-Origin: *&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;-H&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Access-Control-Request-Method: POST&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;-H&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Access-Control-Request-Headers: content-type&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;-H&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Origin: http://localhost/&amp;#34;&lt;/span&gt; 
   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;HTTP/1.1 &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; OK
Date: Sat, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; Jul &lt;span style=&#34;color:#ae81ff&#34;&gt;2023&lt;/span&gt; 13:53:57 GMT
Content-Type: text/plain; charset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Server: APISIX/3.4.0
Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: *
Access-Control-Max-Age: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
Access-Control-Expose-Headers: *
Access-Control-Allow-Headers: *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果返回结果中出现 CORS 相关的 header（
ccess-Control-Allow-Origin: *
&amp;lt; Access-Control-Allow-Methods: *
&amp;lt; Access-Control-Allow-Headers: *
&amp;lt; Access-Control-Expose-Headers: *
&amp;lt; Access-Control-Max-Age: 5
），则代表插件生效、跨域成功。&lt;/p&gt;
&lt;h3 id=&#34;遇到的问题&#34;&gt;遇到的问题&lt;/h3&gt;
&lt;p&gt;在增加好ingress后测试API，发现没有CORS 相关的 header&lt;/p&gt;
&lt;p&gt;，跨域失败&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;HTTP/1.1 &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; OK
Content-Length: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
Connection: keep-alive
Access-Control-Allow-Headers: Content-Type
Access-Control-Allow-Origin: *
Date: Sat, &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt; Jul &lt;span style=&#34;color:#ae81ff&#34;&gt;2023&lt;/span&gt; 13:46:16 GMT
Server: APISIX/3.4.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;经检查，是ApiSix的config配置有误，在配置的插件里，开启了其他插件，没有包括cors，导致插件不生效。去掉后，重启插件配置生效、跨域成功。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;plugins&lt;/span&gt;:
  &lt;span style=&#34;color:#75715e&#34;&gt;# the plugins you enabled&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;log-rotate&lt;/span&gt;
  - &lt;span style=&#34;color:#ae81ff&#34;&gt;proxy-rewrite&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://apisix.apache.org/zh/docs/apisix/plugins/cors/&#34;&gt;apisix cors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://apisix.apache.org/zh/blog/2022/12/15/how-support-ingress-custom-plugins/&#34;&gt;apisix Ingress 如何支持自定义插件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Ingress与IngressController</title>
      <link>https://luckytking.github.io/2022/11/ingress%E4%B8%8Eingresscontroller/</link>
      <pubDate>Sun, 20 Nov 2022 15:31:51 +0800</pubDate>
      
      <guid>https://luckytking.github.io/2022/11/ingress%E4%B8%8Eingresscontroller/</guid>
      <description>&lt;p&gt;本文主要学习记录Kubernetes集群暴露服务的方式: Ingress。&lt;/p&gt;
&lt;h3 id=&#34;简介&#34;&gt;简介&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Ingress 是对集群中服务的外部访问进行管理的 API 对象，典型的访问方式是 HTTP。Ingress 可以提供负载均衡、SSL 终结和基于名称的虚拟托管。&lt;/p&gt;
&lt;p&gt;IngressController  为了让 Ingress 资源工作，集群必须有一个正在运行的 Ingress 控制器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://luckytking.github.io/images/ingress_layout.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图清晰标识出了Ingress的流量走向，其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ingress基于DNS名称（host）或URL路径把请求转发⾄指定的Service资源的规则。它仅是⼀组路由规则的集合。&lt;/li&gt;
&lt;li&gt;Ingress控制器是真正实现“流量穿透”，可以由具有反向代理（HTTP/HTTPS）功能的服务程序实现 , 然后根据这些规则的匹配机制路由请求流量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ingress-资源声明&#34;&gt;Ingress 资源声明&lt;/h3&gt;
&lt;p&gt;Ingress是Kubernetes API的标准资源类型之⼀ ,一个最小Ingress例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Ingress&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;minimal-ingress&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;nginx.ingress.kubernetes.io/rewrite-target&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;ingressClassName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nginx-example&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;rules&lt;/span&gt;:
  - &lt;span style=&#34;color:#f92672&#34;&gt;http&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/testpath&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;pathType&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Prefix&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;backend&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;service&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;test&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;number&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ingress 需要指定 apiVersion、kind、 metadata和 spec 字段。&lt;/li&gt;
&lt;li&gt;Ingress 对象的命名必须是合法的 DNS 子域名名称。&lt;/li&gt;
&lt;li&gt;Ingress annotations 来配置一些选项,  ⽤于识别其所属的Ingress控制器的类别。&lt;/li&gt;
&lt;li&gt;Ingress rules 提供了配置负载均衡器或者代理服务器所需的所有信息。 最重要的是，其中包含与所有传入请求匹配的规则列表。 Ingress 资源仅支持用于转发 HTTP(S) 流量的规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多参考： &lt;a href=&#34;https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress/&#34;&gt;https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;ingress-controller&#34;&gt;Ingress Controller&lt;/h3&gt;
&lt;p&gt;Ingress控制器可以由任何具有反向代理（HTTP/HTTPS）功能的服务程序实现，目前支持和维护 AWS、 GCE 和 Nginx Ingress 控制器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nginx Ingress 作为反向代理和负载均衡器。&lt;/li&gt;
&lt;li&gt;Apache APISIX Ingress 控制器 是一个基于 Apache APISIX 网关 的 Ingress 控制器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多参考：https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress-controllers/&lt;/p&gt;
&lt;h3 id=&#34;安装-ingress-nginx&#34;&gt;安装 Ingress Nginx&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.0.0/deploy/static/provider/cloud/deploy.yaml  -O ingress-nginx-deploy.yaml

kubectl apply -f  ingress-nginx-deploy.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;观测是否成功：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl get pods -n ingress-nginx --watch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果成功的话，查看namespace下所有的资源信息&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@master:/home/master# kubectl get all -n ingress-nginx
NAME                                            READY   STATUS    RESTARTS   AGE
pod/ingress-nginx-controller-123456   1/1     Running   0          1h

NAME                                         TYPE           CLUSTER-IP       EXTERNAL-IP    PORT(S)                      AGE
service/ingress-nginx-controller             LoadBalancer   10.104.182.98    192.168.1.100   80:31666/TCP,443:31888/TCP   1d
service/ingress-nginx-controller-admission   ClusterIP      10.111.228.99   &amp;lt;none&amp;gt;         443/TCP                      1d

NAME                                       READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/ingress-nginx-controller   1/1     1            1           1d

NAME                                                  DESIRED   CURRENT   READY   AGE
replicaset.apps/ingress-nginx-controller-123456   1         1         1      1d

NAME                                       COMPLETIONS   DURATION   AGE
job.batch/ingress-nginx-admission-create   1/1           1s         1d
job.batch/ingress-nginx-admission-patch    1/1           2s         1d
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;使用ingress-发布-tomcat&#34;&gt;使用Ingress 发布 Tomcat&lt;/h3&gt;
&lt;p&gt;部署Tomcat Service&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建deployment&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    kubectl create deployment web --image=tomcat:8.0.50-jre8-alpine
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将 Deployment 暴露出来&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl expose deployment web --type=NodePort --port=8080

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将 Deployment 暴露出来&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@master:/home/master# kubectl get service web
    NAME   TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
    web    NodePort   10.100.183.22   &amp;lt;none&amp;gt;        8080:32562/TCP   30s
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;验证nodeport 是否正常访问 tomcat ，浏览器访问  http://matster_ip:32562
&lt;img src=&#34;https://luckytking.github.io/images/ingress_tomcat.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建 ingress&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt; &lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;networking.k8s.io/v1&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Ingress&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ingressfoo&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;kubernetes.io/ingress.class&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;default&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;rules&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;host&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ingressfoo.io&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;http&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;paths&lt;/span&gt;:
          - &lt;span style=&#34;color:#f92672&#34;&gt;backend&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;service&lt;/span&gt;:
                &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;web&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;:
                  &lt;span style=&#34;color:#f92672&#34;&gt;number&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/bar&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;pathType&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Prefix&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查看ingress是否创建成功&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@master:/home/master# kubectl get ingress
NAME         CLASS    HOSTS                     ADDRESS        PORTS   AGE
ingressfoo   &amp;lt;none&amp;gt;   ingressfoo.io   192.168.1.100   80      1h
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说明Ingress创建成功，修改hosts ：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ingressfoo.io 192.168.1.100&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;验证访问 ingressfoo.io/bar&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://luckytking.github.io/images/ingress_tomcat2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;success&lt;/p&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ingress  介绍 &lt;a href=&#34;https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress/&#34;&gt;https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IngressController 介绍  &lt;a href=&#34;https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress-controllers/&#34;&gt;https://kubernetes.io/zh-cn/docs/concepts/services-networking/ingress-controllers/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apache/apisix-ingress-controller&#34;&gt;https://github.com/apache/apisix-ingress-controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NGINX Ingress 控制器配置 Ingress &lt;a href=&#34;https://kubernetes.io/zh-cn/docs/tasks/access-application-cluster/ingress-minikube/#%E5%90%AF%E7%94%A8-ingress-%E6%8E%A7%E5%88%B6%E5%99%A8&#34;&gt;https://kubernetes.io/zh-cn/docs/tasks/access-application-cluster/ingress-minikube/#%E5%90%AF%E7%94%A8-ingress-%E6%8E%A7%E5%88%B6%E5%99%A8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在K8S上的Web服务该怎么做域名解析 &lt;a href=&#34;https://mp.weixin.qq.com/s/ZU61NIMxh_UOo-chNvkPXA&#34;&gt;https://mp.weixin.qq.com/s/ZU61NIMxh_UOo-chNvkPXA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《Kubernetes进阶实战-第2版》  https://item.jd.com/13140598.html&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
